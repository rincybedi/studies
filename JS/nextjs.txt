 netxjs prerenders: generates html in advance for each page instead of it being done client side javascript
 helps in seo and performance optimization(in react u need to ewait for js to download data from api etc to render compoent, wait time for user, we can show loading indicator)
 seo - google crawler doesnt get js, index the page with all content in source code 
in react, html is loaded with app tag and js then loads and mount hhtml components  or dome nodes inside app tag and then the ui is displayed and becomes interactive
 in next, prerendered html(html is generated with required data and sent to browser) is displayed, js loads and makes page interactive, but html is there to interact with 
check page source code 
 1   server side rendering :server send html on each request without neededing client side js
2 static generation:
html pages are generated at build time
recommened
page can be built once, cached by cdn and server to client instantly
by def in nextjs 

static generation will data:

function UserList({users}) { // will receive users props

}

async getStaticProps(){ //to inject props, run only on server side, not client side(code wont be included in js bundle)
    const data = await fetch(...) // all code typical to nodejs like access fs or querying a db
    clg(data) //print data in srever side
    return { //convention
        props:{
            users:data
        }
    }
}
getstaticProps is allowed onky in page and cant run from regular components
pages(special for routin) vs components 
dev vs prod
getstaticProps will run at build time but in development, run on every req

nextjs is react framework for production
build:.next folder >server>pages all htmls shown in output are here
eg:
user.html 
user.js cant be sent to browser, but are transformation of pages and compoennt returned to our app
user.json data returned from getStaticProps

static>chunks>pages contain js files that can be sent to broser for hydration

Page, size and First load js
eg : / 256b 67kb(256b + 66kb)
when we goto index.js of Pages(root page), it downloads 256b + 66kb
first load js shared by all: 66kb :
chunks/fraemwork.js - react dom modules
main.js - all our components
webpack.js
css.js
